/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.cinestar;

import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import hr.cinestar.dal.Repository;
import hr.cinestar.dal.RepositoryFactory;
import hr.cinestar.model.Actor;
import hr.cinestar.model.ActorAddable;
import hr.cinestar.model.ActorTransferable;
import hr.cinestar.model.Director;
import hr.cinestar.model.DirectorAddable;
import hr.cinestar.model.Genre;
import hr.cinestar.model.GenreAddable;
import hr.cinestar.model.Movie;
import hr.cinestar.model.MovieArchive;
import hr.cinestar.model.MovieTableModel;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import hr.cinestar.model.DirectorTransferable;
import hr.cinestar.model.GenreTransferable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Vedran
 */
public class EditRelationshipPanel extends javax.swing.JPanel implements ActorAddable, DirectorAddable, GenreAddable {

    private static final String FILENAME = "moviearchive.xml";
    private Repository repository;
    private MovieTableModel moviesTableModel;
    private List<Movie> allMovies;

    private Movie selectedMovie;

    private Set<Actor> allActors = new TreeSet<>();
    private Set<Actor> actors = new TreeSet<>();
    private final DefaultListModel<Actor> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Actor> actorsModel = new DefaultListModel<>();

    private Set<Director> allDirectors = new TreeSet<>();
    private Set<Director> directors = new TreeSet<>();
    private final DefaultListModel<Director> allDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorsModel = new DefaultListModel<>();

    private Set<Genre> allGenres = new TreeSet<>();
    private Set<Genre> genres = new TreeSet<>();
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genresModel = new DefaultListModel<>();

    Director selectedDirector;
    Actor selectedActor;
    Genre selectedGenre;

    /**
     * Creates new form EditRelationshipPaenl
     */
    public EditRelationshipPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovieActors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsMovieDirectors = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        btnSaveMovies = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsMoveGenre = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        lsAllGenre = new javax.swing.JList<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        lsMovieActors.setDragEnabled(true);
        lsMovieActors.setDropMode(javax.swing.DropMode.ON);
        lsMovieActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsMovieActorsMouseClicked(evt);
            }
        });
        lsMovieActors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lsMovieActorsKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(lsMovieActors);

        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setDropMode(javax.swing.DropMode.ON);
        jScrollPane3.setViewportView(lsAllDirectors);

        lsMovieDirectors.setDragEnabled(true);
        lsMovieDirectors.setDropMode(javax.swing.DropMode.ON);
        lsMovieDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsMovieDirectorsMouseClicked(evt);
            }
        });
        lsMovieDirectors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lsMovieDirectorsKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(lsMovieDirectors);

        lsAllActors.setToolTipText("");
        lsAllActors.setDragEnabled(true);
        lsAllActors.setDropMode(javax.swing.DropMode.ON);
        jScrollPane6.setViewportView(lsAllActors);

        label1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label1.setText("Genres");

        label2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label2.setForeground(new java.awt.Color(0, 0, 0));
        label2.setText("Actors");

        label3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label3.setForeground(new java.awt.Color(0, 0, 0));
        label3.setText("Directors");

        label4.setText("Movie Actors");

        label5.setForeground(new java.awt.Color(0, 0, 0));
        label5.setText("Movie Genres");

        label6.setForeground(new java.awt.Color(0, 0, 0));
        label6.setText("Available Actors");

        label7.setForeground(new java.awt.Color(0, 0, 0));
        label7.setText("Available Directors");

        label8.setForeground(new java.awt.Color(0, 0, 0));
        label8.setText("Movie Directors");

        label9.setForeground(new java.awt.Color(0, 0, 0));
        label9.setText("Available Genres");

        btnSaveMovies.setBackground(new java.awt.Color(0, 165, 255));
        btnSaveMovies.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSaveMovies.setForeground(java.awt.Color.white);
        btnSaveMovies.setText("Export Database XML");
        btnSaveMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMoviesActionPerformed(evt);
            }
        });

        lsMoveGenre.setDragEnabled(true);
        lsMoveGenre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsMoveGenreMouseClicked(evt);
            }
        });
        lsMoveGenre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lsMoveGenreKeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(lsMoveGenre);

        lsAllGenre.setDragEnabled(true);
        jScrollPane8.setViewportView(lsAllGenre);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(341, 341, 341)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addGap(483, 483, 483)
                .addComponent(btnSaveMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnSaveMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label5.getAccessibleContext().setAccessibleName("Available Directors");
        label5.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMoviesActionPerformed
        try {
            allMovies = repository.selectMovies();

            for (Movie movie : allMovies) {

                movie.setActors(repository.selectActorsMovie(movie));

                movie.setDirectors(repository.selectMovieDirectors(movie));

                movie.setGenres(repository.selectMovieGenres(movie));

            }

            JAXBUtils.save(new MovieArchive(allMovies), FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveMoviesActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        loadRepoData();
        loadAllActorsModel();
        loadAllDirectorsModel();
        loadAllGenresModel();
        loadMovieActorsModel();
        loadMovieDirectorsModel();
        loadMovieGenresModel();


    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        loadRepoData();
        loadAllActorsModel();
        loadAllDirectorsModel();
        loadAllGenresModel();
        loadMovieActorsModel();
        loadMovieDirectorsModel();
        loadMovieGenresModel();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void lsMovieDirectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsMovieDirectorsMouseClicked


    }//GEN-LAST:event_lsMovieDirectorsMouseClicked

    private void lsMoveGenreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsMoveGenreMouseClicked

    }//GEN-LAST:event_lsMoveGenreMouseClicked

    private void lsMovieActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsMovieActorsMouseClicked


    }//GEN-LAST:event_lsMovieActorsMouseClicked

    private void lsMovieActorsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lsMovieActorsKeyPressed
        if (null != lsMovieActors.getSelectedValue() && evt.getKeyCode() == evt.VK_DELETE) {
            selectedActor = lsMovieActors.getSelectedValue();
            try {
                repository.deleteMovieActorConn(selectedMovie.getId(), selectedActor.getId());
                loadRepoData();
                loadMovieActorsModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lsMovieActorsKeyPressed

    private void lsMovieDirectorsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lsMovieDirectorsKeyPressed
        if (null != lsMovieDirectors.getSelectedValue() && evt.getKeyCode() == evt.VK_DELETE) {
            selectedDirector = lsMovieDirectors.getSelectedValue();
            try {
                repository.deleteMovieDirectorConn(selectedMovie.getId(), selectedDirector.getId());
                loadRepoData();
                loadMovieDirectorsModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lsMovieDirectorsKeyPressed

    private void lsMoveGenreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lsMoveGenreKeyPressed
        if (null != lsMoveGenre.getSelectedValue() && evt.getKeyCode() == evt.VK_DELETE) {
            selectedGenre = lsMoveGenre.getSelectedValue();

            try {
                repository.deleteMovieGenreConn(selectedMovie.getId(), selectedGenre.getId());
                loadRepoData();
                loadMovieGenresModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lsMoveGenreKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveMovies;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JList<Actor> lsAllActors;
    private javax.swing.JList<Director> lsAllDirectors;
    private javax.swing.JList<Genre> lsAllGenre;
    private javax.swing.JList<Genre> lsMoveGenre;
    private javax.swing.JList<Actor> lsMovieActors;
    private javax.swing.JList<Director> lsMovieDirectors;
    private javax.swing.JTable tbMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initTable();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repository.selectMovies());
        tbMovies.setModel(moviesTableModel);
    }

    private void initDragNDrop() {
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportTransferHandlerActors());
        lsMovieActors.setDropMode(DropMode.ON);
        lsMovieActors.setTransferHandler(new ImportTransferHandlerActors());

        lsAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setTransferHandler(new ExportTransferHandlerDirectors());
        lsMovieDirectors.setDropMode(DropMode.ON);
        lsMovieDirectors.setTransferHandler(new ImportTransferHandlerDirectors());

        lsAllGenre.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenre.setDragEnabled(true);
        lsAllGenre.setTransferHandler(new ExportTransferHandlerGenre());
        lsMoveGenre.setDropMode(DropMode.ON);
        lsMoveGenre.setTransferHandler(new ImportTransferHandlerGenre());
    }

    private class ExportTransferHandlerActors extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(lsAllActors.getSelectedValue());
        }
    }

    private class ImportTransferHandlerActors extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor addActor = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);

                if (actors.add(addActor)) {
                    repository.createMovieActorConn(addActor, selectedMovie);
                    loadMovieActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ExportTransferHandlerDirectors extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new DirectorTransferable(lsAllDirectors.getSelectedValue());
        }
    }

    private class ImportTransferHandlerDirectors extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DirectorTransferable.DIRECTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Director addDirector = (Director) transferable.getTransferData(DirectorTransferable.DIRECTOR_FLAVOR);

                if (directors.add(addDirector)) {
                    repository.createMovieDirectorConn(addDirector, selectedMovie);
                    loadMovieDirectorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ExportTransferHandlerGenre extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenre.getSelectedValue());
        }
    }

    private class ImportTransferHandlerGenre extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {

                Genre addGenre = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (genres.add(addGenre)) {
                    repository.createMovieGenreConn(addGenre, selectedMovie);
                    loadMovieGenresModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    @Override
    public boolean addActor(Actor actor) {
        if (allActors.add(actor)) {
            try {

                loadAllActorsModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    @Override
    public boolean addDirector(Director director) {
        if (allDirectors.add(director)) {
            try {

                loadAllDirectorsModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    @Override
    public boolean addGenre(Genre genre) {
        if (allGenres.add(genre)) {
            try {

                loadAllGenresModel();
            } catch (Exception ex) {
                Logger.getLogger(EditRelationshipPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    private void loadAllActorsModel() {
        allActorsModel.clear();
        allActors.forEach(allActorsModel::addElement);
        lsAllActors.setModel(allActorsModel);

    }

    private void loadAllDirectorsModel() {
        allDirectorsModel.clear();
        allDirectors.forEach(allDirectorsModel::addElement);
        lsAllDirectors.setModel(allDirectorsModel);
    }

    private void loadAllGenresModel() {
        allGenresModel.clear();
        allGenres.forEach(allGenresModel::addElement);
        lsAllGenre.setModel(allGenresModel);
    }

    private void loadMovieActorsModel() {
        actorsModel.clear();
        actors.forEach(actorsModel::addElement);
        lsMovieActors.setModel(actorsModel);
    }

    private void loadMovieDirectorsModel() {
        directorsModel.clear();
        directors.forEach(directorsModel::addElement);
        lsMovieDirectors.setModel(directorsModel);
    }

    private void loadMovieGenresModel() {
        genresModel.clear();
        genres.forEach(genresModel::addElement);
        lsMoveGenre.setModel(genresModel);
    }

    private void loadRepoData() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                selectedMovie.setActors(repository.selectActorsMovie(selectedMovie));
                selectedMovie.setDirectors(repository.selectMovieDirectors(selectedMovie));
                selectedMovie.setGenres(repository.selectMovieGenres(selectedMovie));

            }
            actors = new HashSet<>(selectedMovie.getActors());
            allActors = new HashSet<>(repository.selectActors());

            directors = new HashSet<>(selectedMovie.getDirectors());
            allDirectors = new HashSet<>(repository.selectDirectors());

            genres = new HashSet<>(selectedMovie.getGenres());
            allGenres = new HashSet<>(repository.selectGenres());
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }

    }
}
